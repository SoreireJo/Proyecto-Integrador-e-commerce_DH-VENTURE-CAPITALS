add: function (req, res) {
        //res.send('Estoy en el proceso de agregar');
        let generos = Genres.findAll();
        let actores = Actors.findAll();
        Promise
        .all([generos,actores])
        .then(([allGenres,allActors])=>{
            //res.send(allActors);
            res.render('moviesAdd', {allGenres,allActors})
        })
    },


Actor.associate = function(models){
        Actor.belongsToMany(models.Movie, {
            as: 'movies',
            through: 'actor_movie',
            foreignKey: 'actor_id',
            otherKey: 'movie_id'
        })
    }


Movie.belongsTo(models.Genre, {
            as : 'genre',
            foreignKey: 'genre_id'
        })    
        //Aquí deben colocar todas las demas relaciones de este módelo con los otros
        Movie.belongsToMany(models.Actor, {
            as: 'actors',
            through: 'actor_movie',
            foreignKey: 'movie_id',
            otherKey: 'actor_id'
        })
    }


Genre.associate = function(models){
        Genre.hasMany(models.Movie, {
            as : 'movies',
            foreignKey: 'genre_id'
        })    
        //Aquí deben colocar todas las demas relaciones de este módelo con los otros
        
    }


let usuarioLogueado = '';
		let errors = validationResult(req.body);
		if (errors.isEmpty()) {
			for(let i=0; i<users.length; i++){
				if(users[i].user == req.body.user){
					if(users[i].password == req.body.password){
						usuarioLogueado = users[i];
						break
					}
				}
			}
			if(usuarioLogueado == undefined){
				return res.render('./users/userLogin', {errors: [{
					msg: 'Credenciales Invalidas'
				}]});
			} 
			req.session.usuarioLogueado = usuarioLogueado;
		} else {
			console.log("Hola aqui to con errores");
			res.render('./users/userLogin', {errors: errors.errors});
		}
